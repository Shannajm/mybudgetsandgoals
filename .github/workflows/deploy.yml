name: Build & Deploy to cPanel

on:
  push:
    branches: [ main ]            # change if your default branch is different
  workflow_dispatch:              # lets you run it manually from the Actions tab

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Sanity: make sure all required secrets are present (clear error if any are missing)
      - name: Preflight secrets
        run: |
          require() { test -n "$1" || { echo "❌ Missing secret: $2"; exit 1; }; }
          require "${{ secrets.FTP_SERVER }}" FTP_SERVER
          require "${{ secrets.FTP_USERNAME }}" FTP_USERNAME
          require "${{ secrets.FTP_PASSWORD }}" FTP_PASSWORD
          require "${{ secrets.FTP_PORT }}" FTP_PORT
          require "${{ secrets.FTP_PATH }}" FTP_PATH
          require "${{ secrets.VITE_FIREBASE_API_KEY }}" VITE_FIREBASE_API_KEY
          require "${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" VITE_FIREBASE_AUTH_DOMAIN
          require "${{ secrets.VITE_FIREBASE_PROJECT_ID }}" VITE_FIREBASE_PROJECT_ID
          require "${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" VITE_FIREBASE_STORAGE_BUCKET
          require "${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" VITE_FIREBASE_MESSAGING_SENDER_ID
          require "${{ secrets.VITE_FIREBASE_APP_ID }}" VITE_FIREBASE_APP_ID

      - name: Create .env.production
        run: |
          cat > .env.production <<'EOF'
          VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
          EOF

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build

      # Helpful but non-fatal DNS check (so we can see if the hostname resolves)
      - name: DNS check for FTP server (non-fatal)
        continue-on-error: true
        run: |
          echo "Resolving ${{ secrets.FTP_SERVER }} ..."
          nslookup ${{ secrets.FTP_SERVER }}

      # Auto-pick protocol: use ftp when FTP_SERVER is an IP (avoids FTPS cert mismatch)
      - name: Decide protocol automatically
        run: |
          S="${{ secrets.FTP_SERVER }}"
          P="${{ secrets.FTP_PROTOCOL }}"
          if [[ "$S" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Detected IPv4 for FTP_SERVER; forcing plain FTP."
            echo "DEPLOY_PROTOCOL=ftp" >> $GITHUB_ENV
          else
            echo "DEPLOY_PROTOCOL=${P:-ftps}" >> $GITHUB_ENV
          fi

      - name: Deploy via FTP/FTPS
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}      # e.g. ftp.yourdomain.com (no scheme, no slash)
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}          # usually 21
          protocol: ${{ env.DEPLOY_PROTOCOL }}   # ftps or ftp (autodetected above)
          server-dir: ${{ secrets.FTP_PATH }}    # e.g. public_html/ or public_html/app/ (must end with /)
          local-dir: dist/
          log-level: verbose
          timeout: 120000
          dangerous-clean-slate: true
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/**
            **/.env*
